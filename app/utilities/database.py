from data import *
from driver import *

# TODO: Proper documentation for this file, more methods and more functionality

class Database():
    def __init__(self):
            # the database is a table called applications with the following columns
            # id - the id of the application. Important! THIS IS NOT THE BOT ID, This is a UUID generated by the database
            # type - a json object containing information about the type of application and meta of it (such as url's, bot_id's)
            # notifications - a json object of what notification IDs to send to the user when this application is down.

            # another table is stored for users with the following keys
            # id - the discord id of the server
            # applications - what applications they are subscribed too
        self.applications = Driver("Applications","id TEXT PRIMARY KEY, type NVARCHAR(MAX), notifications NVARCHAR(MAX)")
        self.users = Driver("Users", "id TEXT PRIMARY KEY, applications NVARCHAR(MAX)")

    # we need the following methods

    # application_is_in_database - public checks if the application is in the database
    # get_application_from_database - public gets the application from the database and returns a dataclass object of the application
    # add_application_to_database - public adds the application to the database
    # remove_application_from_database - public removes the application from the database
    # add_application_notification - public adds the notification to the database
    # remove_application_notification - public removes the notification from the database

    # get_notifications - public gets all a users notifications
    # add_notification - public adds a notification to a user and an application
    # remove_notification - public removes a notification from a user and an application
    # update_notification - public updates a notification from a user and an application

    def get_all_applications(self):
        """
        Gets all the applications in the database

        Parameters
        ----------
        None

        Returns
        -------
        Array
            An array of Application objects
        """
        applications = []
        for application in self.applications.select("*"):
            applications.append(Application(application[0],application[1],application[2]))
        return applications

    def application_is_in_database(self,id:int):
        """
        Checks if the application is in the database

        Parameters
        ----------
        id : int
            The id of the application to check
        
        Returns
        -------
        bool
            True if the application is in the database, False if not
        """
        if self.applications.select("*",f"id = {id}") != None:
            return True
        return False
    
    def get_application_from_database(self,id:int):
        """
        Gets the application from the database

        Parameters
        ----------
        id : int
            The id of the application to get
        
        Returns
        -------
        Application
            The application object
        """
        if self.application_is_in_database(id):
            return Application(id,self.applications.select("type",f"id = {id}"),self.applications.select("notifications",f"id = {id}"))
        else:
            raise Exception("Application not in database")
    
    def add_application_to_database(self,id:int,type:json,notifications:json):
        """
        Adds the application to the database

        Parameters
        ----------
        id : int
            The id of the application to add
        type : json
            The type of the application
        notifications : json
            The notifications of the application
        
        Returns
        -------
        bool
            True if the application was added, Exception raised if not
        """
        if not self.__application_is_in_database(id):
            self.applications.insert("id,type,notifications",f"{id},{type},{notifications}")
            return True
        else:
            raise Exception("Application already in database")
    
    def remove_application_from_database(self,id:int):
        """
        Removes the application from the database

        Parameters
        ----------
        id : int
            The id of the application to remove
        
        Returns
        -------
        bool
            True if the application was removed, Exception raised if not
        """
        if self.__application_is_in_database(id):
            self.applications.delete(f"id = {id}")
            return True
        else:
            raise Exception("Application not in database")
    
    def add_application_notification(self,id:int,notification:json):
        """
        Adds the notification to the application

        Parameters
        ----------
        id : int
            The id of the application to add the notification to
        notification : json
            The notification to add
        
        Returns
        -------
        bool
            True if the notification was added, Exception raised if not
        """
        if self.__application_is_in_database(id):
            notifications = self.applications.select("notifications",f"id = {id}")
            
            # need to properly update the json object
            
            self.applications.update(f"id = {id}",["notifications"],[notifications])
            return True
        else:
            raise Exception("Application not in database")
    
    def remove_application_notification(self,id:int,notification:json):
        """
        Removes the notification from the application

        Parameters
        ----------
        id : int
            The id of the application to remove the notification from
        notification : json
            The notification to remove
        
        Returns
        -------
        bool
            True if the notification was removed, Exception raised if not
        """
        if self.__application_is_in_database(id):
            notifications = self.applications.select("notifications",f"id = {id}")
            
            # need to properly update the json object
            
            self.applications.update(f"id = {id}",["notifications"],[notifications])
            return True
        else:
            raise Exception("Application not in database")
    
    def get_notifications(self,id:int):
        """
        Gets the notifications for a user

        Parameters
        ----------
        id : int
            The id of the user to get the notifications for
        
        Returns
        -------
        User
            The user object
        """
        if self.users.select("*",f"id = {id}") != None:
            return User(id,self.users.select("applications",f"id = {id}"))
        else:
            raise Exception("User not in database")
    
    def add_notification(self,id:int,notification:json):
        """
        Adds the notification to the user

        Parameters
        ----------
        id : int
            The id of the user to add the notification to
        notification : json
            The notification to add
        
        Returns
        -------
        bool
            True if the notification was added, Exception raised if not
        """
        if self.users.select("*",f"id = {id}") != None:
            notifications = self.users.select("applications",f"id = {id}")
            
            # need to properly update the json object
            
            self.users.update(f"id = {id}",["applications"],[notifications])

            self.add_application_notification(notification["application"],notification)
            return True
        else:
            raise Exception("User not in database")
    
    def remove_notification(self,id:int,notification:json):
        """
        Removes the notification from the user

        Parameters
        ----------
        id : int
            The id of the user to remove the notification from
        notification : json
            The notification to remove
        
        Returns
        -------
        bool
            True if the notification was removed, Exception raised if not
        """
        if self.users.select("*",f"id = {id}") != None:
            notifications = self.users.select("applications",f"id = {id}")
            
            # need to properly update the json object
            
            self.users.update(f"id = {id}",["applications"],[notifications])

            self.remove_application_notification(notification["application"],notification)
            return True
        else:
            raise Exception("User not in database")
    
    def update_notification(self,id:int,notification:json):
        """
        Updates the notification from the user

        Parameters
        ----------
        id : int
            The id of the user to update the notification from
        notification : json
            The notification to update
        
        Returns
        -------
        bool
            True if the notification was updated, Exception raised if not
        """
        if self.users.select("*",f"id = {id}") != None:
            notifications = self.users.select("applications",f"id = {id}")
            
            # need to properly update the json object
            
            self.users.update(f"id = {id}",["applications"],[notifications])
            return True
        else:
            raise Exception("User not in database")
        
